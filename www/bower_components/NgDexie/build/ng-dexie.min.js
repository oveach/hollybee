/**
 * Angularjs wrapper around Dexie.js an IndexedDB handler
 * @version v0.0.17 - build 2016-03-08
 * @link https://github.com/FlussoBV/NgDexie
 * @license Apache License, http://www.apache.org/licenses/
 */
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ngDexie"),function(){"use strict";function a(){function b(){return d}var c=this,d={name:"",debug:!1},e=function(){console.error("NgDexie :: No configuration hook has been set!")};c.setOptions=function(a){d=angular.extend({},d,a)},c.setConfiguration=function(a){e=a},c.$get=["$rootScope","$q","$log","ngDexieUtils",function(d,f,g,h){function i(a,b){var c=f.defer();return t.table(a).get(b,function(a){c.resolve(a)}),c.promise}function j(a,b,c){var d=f.defer();return t.table(a).where(b).equals(c).toArray(function(a){angular.isArray(a)&&a.length>0?d.resolve(a[0]):d.reject()}),d.promise}function k(a,b){return angular.isUndefined(a)?t:(angular.isUndefined(b)&&(b=!1),b?d.$apply(function(){a.call(c,t)}):a.call(c,t),t)}function l(a,b){var d=f.defer();return t.transaction("rw",a,function(){b.call(c,t)}).then(function(){d.resolve()})["catch"](function(a){d.reject(a)}),d.promise}function m(a){var b=f.defer();return t.table(a).toArray(function(a){b.resolve(a)}),b.promise}function n(a,b,c){var d=f.defer();return t.table(a).where(b).equals(c).toArray(function(a){d.resolve(a)}),d.promise}function o(b,c){var d=f.defer();return a.getDb(function(a){a.table(b)["delete"](c).then(function(){d.resolve()})["catch"](function(a){g.debug("Error while using delete: "+a),d.reject(a)})}),d.promise}function p(a,b){var c=f.defer();return t.table(a).put(h.deepClone(b)).then(function(a){c.resolve(a)})["catch"](function(a){g.debug("Error while using put: "+a),c.reject(a)}),c.promise}function q(a,b){var c=f.defer();return t.table(a).add(h.deepClone(b)).then(function(a){c.resolve(a)})["catch"](function(a){g.debug("Error while using add: "+a),c.reject(a)}),c.promise}function r(a){var b=f.defer();return t.close(),a&&a.call(this,t),t.open().then(function(){b.resolve()}),b.promise}g.debug("NgDexie :: init");var s=b(),t=new Dexie(s.name);return s.debug&&g.warn("NgDexie :: debug mode enabled"),s.debug&&t["delete"]().then(function(){g.warn("debug mode :: Database deleted")}),e.call(this,t),t.open().then(function(){t.close(),t.open().then(function(){g.debug("NgDexie :: database is open")})}),t.on("blocked",function(){g.warn("database seems to be blocked")}),{getOptions:b,get:i,getByIndex:j,getDb:k,getTransaction:l,list:m,listByIndex:n,remove:o,add:q,put:p,reopen:r}}]}angular.module("ngdexie",["ngdexie.core","ngdexie.ui"]),angular.module("ngdexie.core",["ngdexie.utils"]),angular.module("ngdexie.core").provider("ngDexie",a)}(),function(){"use strict";function a(){function a(a){var b=Dexie.deepClone(a);return angular.isDefined(b.$$hashKey)&&delete b.$$hashKey,a}function b(a,b,c){var d;return function(){var e=this,f=arguments,g=function(){d=null,c||a.apply(e,f)},h=c&&!d;clearTimeout(d),d=setTimeout(g,b),h&&a.apply(e,f)}}return{deepClone:a,debounce:b}}angular.module("ngdexie.utils",["ngdexie.core"]),angular.module("ngdexie.utils").factory("ngDexieUtils",a)}(),function(){"use strict";function a(a,b,c,d){function e(e,f,g,h){var i=j._getScope(e),k=d.debounce(function(a,b){c.put(a,b)},1e3);return angular.isUndefined(e.$eval(f))?c.get(g,h).then(function(b){a(f).assign(e,b);var d=angular.isObject(b),j=function(a){angular.isDefined(a)&&k(g,a)};i.watchers[f]=e.$watch(f,j,d),i.dbchanges[f]={table:g,key:h,refresh:function(){c.get(g,h).then(function(b){a(f).assign(e,b)})}}}):b.error("Already binded: "+f),this}function f(a,b){var c=j._getScope(a);c.watchers[b](),delete c.watchers[b],delete c.dbchanges[b]}function g(a){j._removeScope(a)}function h(){c.getDb(function(a){a.on("changes",function(a){angular.forEach(a,function(a){i(a.table,a.key)})})})}function i(a,b){angular.forEach(j._scopes,function(c){angular.forEach(c.dbchanges,function(c){c.table===a&&c.key===b&&c.refresh()})})}var j=this;return j._scopes={},j._getScope=function(a){var b="s"+a.$id;return angular.isUndefined(j._scopes[b])&&(j._scopes[b]={watchers:{},dbchanges:{}},a.$on("$destroy",function(){delete j._scopes[b]})),j._scopes[b]},j._removeScope=function(a){var b=j._getScope(a);angular.forEach(b.watchers,function(b,c){f(a,c)});var c="s"+a.$id;delete j._scopes[c]},h(),{bind:e,unbind:f,unbindScope:g}}angular.module("ngdexie.ui",["ngdexie.core"]),angular.module("ngdexie.ui").factory("ngDexieBind",a),a.$inject=["$parse","$log","ngDexie","ngDexieUtils"]}();